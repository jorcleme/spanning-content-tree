"""Ensure Article and Series tables exist

Revision ID: 5e424685f01a
Revises: 7e5b5dc7342b
Create Date: 2024-09-05 12:25:15.331396

"""

from typing import Sequence, Union

from alembic import op
import uuid
import sqlalchemy as sa
import apps.webui.internal.db
from migrations.util import get_existing_tables


# revision identifiers, used by Alembic.
revision: str = "5e424685f01a"
down_revision: Union[str, None] = "7e5b5dc7342b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    existing_tables = set(get_existing_tables())
    # ### commands auto generated by Alembic - please adjust! ###

    if "series" not in existing_tables:
        op.create_table(
            "series",
            sa.Column("id", sa.String(), nullable=False),
            sa.Column("name", sa.Text(), nullable=False),
            sa.Column(
                "admin_guide_urls", apps.webui.internal.db.JSONField(), nullable=True
            ),
            sa.Column(
                "datasheet_urls", apps.webui.internal.db.JSONField(), nullable=True
            ),
            sa.Column(
                "cli_guide_urls", apps.webui.internal.db.JSONField(), nullable=True
            ),
            sa.Column("software_url", sa.Text(), nullable=True),
            sa.Column("created_at", sa.BigInteger(), nullable=False),
            sa.Column("updated_at", sa.BigInteger(), nullable=False),
            sa.Column("articles", apps.webui.internal.db.JSONField(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("name"),
        )

    if "articles" not in existing_tables:
        op.create_table(
            "articles",
            sa.Column(
                "id", sa.String(), nullable=False, default=lambda: str(uuid.uuid4())
            ),
            sa.Column("title", sa.Text(), nullable=False),
            sa.Column("document_id", sa.String(), nullable=False),
            sa.Column("category", sa.String(), nullable=False),
            sa.Column("url", sa.String(), nullable=False),
            sa.Column("objective", sa.Text(), nullable=True),
            sa.Column(
                "applicable_devices", apps.webui.internal.db.JSONField(), nullable=True
            ),
            sa.Column("introduction", sa.Text(), nullable=True),
            sa.Column("steps", apps.webui.internal.db.JSONField(), nullable=True),
            sa.Column(
                "revision_history", apps.webui.internal.db.JSONField(), nullable=True
            ),
            sa.Column("created_at", sa.BigInteger(), nullable=False),
            sa.Column("updated_at", sa.BigInteger(), nullable=False),
            sa.Column("series", apps.webui.internal.db.JSONField(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("document_id"),
            sa.UniqueConstraint("url"),
        )

    if "article_on_series" not in existing_tables:
        op.create_table(
            "article_on_series",
            sa.Column("article_id", sa.String(), nullable=False),
            sa.Column("series_id", sa.String(), nullable=False),
            sa.ForeignKeyConstraint(
                ["article_id"], ["articles.id"], ondelete="CASCADE"
            ),
            sa.ForeignKeyConstraint(["series_id"], ["series.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("article_id", "series_id"),
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("article_on_series")
    op.drop_table("articles")
    op.drop_table("series")
    # ### end Alembic commands ###
